/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typed = __webpack_require__(1);\n\nvar _typed2 = _interopRequireDefault(_typed);\n\nvar _animejs = __webpack_require__(3);\n\nvar _animejs2 = _interopRequireDefault(_animejs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n__webpack_require__(5);\n\n\nvar width = window.innerWidth;\nvar height = window.innerHeight;\nvar ctx = document.getElementById('heart-back').getContext('2d');\nvar colors = [\"#EF5350\", \"#EC407A\", \"#AB47BC\", \"#7E57C2\", \"#5C6BC0\", \"#42A5F5\", \"#29B6F6\", \"#26C6DA\", \"#26A69A\", \"#66BB6A\", \"#9CCC65\", \"#D4E157\", \"#FFEE58\", \"#FFCA28\", \"#FFA726\", \"#FF7043\", \"#8D6E63\", \"#BDBDBD\", \"#78909C\"];\nvar hearts = [];\nwindow.onload = function () {\n  StartTypeWord();\n  initHeartWall();\n};\n\nfunction StartTypeWord() {\n\n  var wrep = '<br>^50';\n  // let myWords = `Hi! 力文：^1000\n  // ${wrep}\n  // ${wrep}\n  // 好久都没见了\n  // ${wrep}\n  // ${wrep}\n  // 生日快乐\n  // I Love You`;\n\n  var myWords = 'Test Test\\n  ' + wrep + '\\n  ' + wrep + '\\n  TestTestTestTestTest TestTestTestTestTestTestTest\\n  ' + wrep + '\\n  ' + wrep + '\\n  TestTestTestTestTestTestTest\\n  TestTestTestTestTestTestTestTestTestTest';\n\n  var options = {\n    strings: [myWords],\n    typeSpeed: 150,\n    loop: true,\n    callback: function callback() {}\n  };\n\n  var typed = new _typed2.default(\"#mywords\", options);\n}\n\nfunction initHeartWall() {\n  //ctx.width = width;\n  //ctx.height = height;\n  ctx.canvas.width = width;\n  ctx.canvas.height = height;\n  var heartCount = 50;\n\n  for (var i = 0; i < heartCount; i++) {\n    var cntrX = _animejs2.default.random(0, width);\n    var cntrY = _animejs2.default.random(height, height * 2);\n    var vscale = _animejs2.default.random(0.5, 2);\n    var color = colors[_animejs2.default.random(0, colors.length)];\n    var heart = drawHeart(ctx, cntrX, cntrY, vscale, color);\n    heart.draw();\n    hearts.push(heart);\n  }\n\n  for (var _i = 0; _i < hearts.length; _i++) {\n    (0, _animejs2.default)({\n      targets: hearts[_i],\n      cntrY: function cntrY(p) {\n        return p.cntrY - height;\n      },\n      update: function update(anim) {\n        for (var i = 0; i < anim.animatables.length; i++) {\n          anim.animatables[i].target.draw();\n        }\n      },\n      duration: _animejs2.default.random(10000, 20000),\n      loop: true\n    });\n  }\n}\n(0, _animejs2.default)({\n  duration: Infinity,\n  update: function update() {\n    ctx.clearRect(0, 0, width, height);\n  }\n});\nfunction drawHeart(ctx, cntrX, cntrY, vscale, color) {\n  var heart = {};\n  var d = Math.PI / 180;\n  heart.cntrX = cntrX;\n  heart.cntrY = cntrY;\n  heart.alpha = .8;\n  heart.color = color;\n  heart.draw = function () {\n    ctx.beginPath();\n    ctx.moveTo(cntrX, cntrY - getY(0) * vscale);\n    for (var i = 0; i < 2 * Math.PI; i = i + d) {\n      var x = getX(i) * vscale + heart.cntrX;\n      var y = -getY(i) * vscale + heart.cntrY;\n      ctx.lineTo(x, y);\n    }\n    ctx.fillStyle = heart.color;\n    ctx.globalAlpha = heart.alpha;\n    ctx.fill();\n  };\n  return heart;\n}\n\nfunction getX(t) {\n  return 16 * Math.pow(Math.sin(t), 3);\n}\n\nfunction getY(t) {\n  return 13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t);\n}\n\nwindow.addEventListener('resize', initHeartWall);\n\n// document.addEventListener(('ontouchstart' in window || navigator.msMaxTouchPoints) ? 'touchstart' : 'mousedown', function(e) {\n//   let cntrX = e.clientX || e.touches[0].clientX;\n//   let cntrY = e.clientY || e.touches[0].clientY;\n// }, false);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\n * \n *   typed.js - A JavaScript Typing Animation Library\n *   Author: Matt Boldt <me@mattboldt.com>\n *   Version: v2.0.6\n *   Url: https://github.com/mattboldt/typed.js\n *   License(s): MIT\n * \n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif (( false ? 'undefined' : _typeof(exports)) === 'object' && ( false ? 'undefined' : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') exports[\"Typed\"] = factory();else root[\"Typed\"] = factory();\n})(undefined, function () {\n\treturn (/******/function (modules) {\n\t\t\t// webpackBootstrap\n\t\t\t/******/ // The module cache\n\t\t\t/******/var installedModules = {};\n\t\t\t/******/\n\t\t\t/******/ // The require function\n\t\t\t/******/function __webpack_require__(moduleId) {\n\t\t\t\t/******/\n\t\t\t\t/******/ // Check if module is in cache\n\t\t\t\t/******/if (installedModules[moduleId])\n\t\t\t\t\t/******/return installedModules[moduleId].exports;\n\t\t\t\t/******/\n\t\t\t\t/******/ // Create a new module (and put it into the cache)\n\t\t\t\t/******/var module = installedModules[moduleId] = {\n\t\t\t\t\t/******/exports: {},\n\t\t\t\t\t/******/id: moduleId,\n\t\t\t\t\t/******/loaded: false\n\t\t\t\t\t/******/ };\n\t\t\t\t/******/\n\t\t\t\t/******/ // Execute the module function\n\t\t\t\t/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\t\t\t/******/\n\t\t\t\t/******/ // Flag the module as loaded\n\t\t\t\t/******/module.loaded = true;\n\t\t\t\t/******/\n\t\t\t\t/******/ // Return the exports of the module\n\t\t\t\t/******/return module.exports;\n\t\t\t\t/******/\n\t\t\t}\n\t\t\t/******/\n\t\t\t/******/\n\t\t\t/******/ // expose the modules object (__webpack_modules__)\n\t\t\t/******/__webpack_require__.m = modules;\n\t\t\t/******/\n\t\t\t/******/ // expose the module cache\n\t\t\t/******/__webpack_require__.c = installedModules;\n\t\t\t/******/\n\t\t\t/******/ // __webpack_public_path__\n\t\t\t/******/__webpack_require__.p = \"\";\n\t\t\t/******/\n\t\t\t/******/ // Load entry module and return exports\n\t\t\t/******/return __webpack_require__(0);\n\t\t\t/******/\n\t\t}(\n\t\t/************************************************************************/\n\t\t/******/[\n\t\t/* 0 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, '__esModule', {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError('Cannot call a class as a function');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar _initializerJs = __webpack_require__(1);\n\n\t\t\tvar _htmlParserJs = __webpack_require__(3);\n\n\t\t\t/**\n    * Welcome to Typed.js!\n    * @param {string} elementId HTML element ID _OR_ HTML element\n    * @param {object} options options object\n    * @returns {object} a new Typed object\n    */\n\n\t\t\tvar Typed = function () {\n\t\t\t\tfunction Typed(elementId, options) {\n\t\t\t\t\t_classCallCheck(this, Typed);\n\n\t\t\t\t\t// Initialize it up\n\t\t\t\t\t_initializerJs.initializer.load(this, options, elementId);\n\t\t\t\t\t// All systems go!\n\t\t\t\t\tthis.begin();\n\t\t\t\t}\n\n\t\t\t\t/**\n     * Toggle start() and stop() of the Typed instance\n     * @public\n     */\n\n\t\t\t\t_createClass(Typed, [{\n\t\t\t\t\tkey: 'toggle',\n\t\t\t\t\tvalue: function toggle() {\n\t\t\t\t\t\tthis.pause.status ? this.start() : this.stop();\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Stop typing / backspacing and enable cursor blinking\n      * @public\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'stop',\n\t\t\t\t\tvalue: function stop() {\n\t\t\t\t\t\tif (this.typingComplete) return;\n\t\t\t\t\t\tif (this.pause.status) return;\n\t\t\t\t\t\tthis.toggleBlinking(true);\n\t\t\t\t\t\tthis.pause.status = true;\n\t\t\t\t\t\tthis.options.onStop(this.arrayPos, this);\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Start typing / backspacing after being stopped\n      * @public\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'start',\n\t\t\t\t\tvalue: function start() {\n\t\t\t\t\t\tif (this.typingComplete) return;\n\t\t\t\t\t\tif (!this.pause.status) return;\n\t\t\t\t\t\tthis.pause.status = false;\n\t\t\t\t\t\tif (this.pause.typewrite) {\n\t\t\t\t\t\t\tthis.typewrite(this.pause.curString, this.pause.curStrPos);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.backspace(this.pause.curString, this.pause.curStrPos);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.options.onStart(this.arrayPos, this);\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Destroy this instance of Typed\n      * @public\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'destroy',\n\t\t\t\t\tvalue: function destroy() {\n\t\t\t\t\t\tthis.reset(false);\n\t\t\t\t\t\tthis.options.onDestroy(this);\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Reset Typed and optionally restarts\n      * @param {boolean} restart\n      * @public\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'reset',\n\t\t\t\t\tvalue: function reset() {\n\t\t\t\t\t\tvar restart = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];\n\n\t\t\t\t\t\tclearInterval(this.timeout);\n\t\t\t\t\t\tthis.replaceText('');\n\t\t\t\t\t\tif (this.cursor && this.cursor.parentNode) {\n\t\t\t\t\t\t\tthis.cursor.parentNode.removeChild(this.cursor);\n\t\t\t\t\t\t\tthis.cursor = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.strPos = 0;\n\t\t\t\t\t\tthis.arrayPos = 0;\n\t\t\t\t\t\tthis.curLoop = 0;\n\t\t\t\t\t\tif (restart) {\n\t\t\t\t\t\t\tthis.insertCursor();\n\t\t\t\t\t\t\tthis.options.onReset(this);\n\t\t\t\t\t\t\tthis.begin();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Begins the typing animation\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'begin',\n\t\t\t\t\tvalue: function begin() {\n\t\t\t\t\t\tvar _this = this;\n\n\t\t\t\t\t\tthis.typingComplete = false;\n\t\t\t\t\t\tthis.shuffleStringsIfNeeded(this);\n\t\t\t\t\t\tthis.insertCursor();\n\t\t\t\t\t\tif (this.bindInputFocusEvents) this.bindFocusEvents();\n\t\t\t\t\t\tthis.timeout = setTimeout(function () {\n\t\t\t\t\t\t\t// Check if there is some text in the element, if yes start by backspacing the default message\n\t\t\t\t\t\t\tif (!_this.currentElContent || _this.currentElContent.length === 0) {\n\t\t\t\t\t\t\t\t_this.typewrite(_this.strings[_this.sequence[_this.arrayPos]], _this.strPos);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Start typing\n\t\t\t\t\t\t\t\t_this.backspace(_this.currentElContent, _this.currentElContent.length);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, this.startDelay);\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Called for each character typed\n      * @param {string} curString the current string in the strings array\n      * @param {number} curStrPos the current position in the curString\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'typewrite',\n\t\t\t\t\tvalue: function typewrite(curString, curStrPos) {\n\t\t\t\t\t\tvar _this2 = this;\n\n\t\t\t\t\t\tif (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n\t\t\t\t\t\t\tthis.el.classList.remove(this.fadeOutClass);\n\t\t\t\t\t\t\tif (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar humanize = this.humanizer(this.typeSpeed);\n\t\t\t\t\t\tvar numChars = 1;\n\n\t\t\t\t\t\tif (this.pause.status === true) {\n\t\t\t\t\t\t\tthis.setPauseStatus(curString, curStrPos, true);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// contain typing function in a timeout humanize'd delay\n\t\t\t\t\t\tthis.timeout = setTimeout(function () {\n\t\t\t\t\t\t\t// skip over any HTML chars\n\t\t\t\t\t\t\tcurStrPos = _htmlParserJs.htmlParser.typeHtmlChars(curString, curStrPos, _this2);\n\n\t\t\t\t\t\t\tvar pauseTime = 0;\n\t\t\t\t\t\t\tvar substr = curString.substr(curStrPos);\n\t\t\t\t\t\t\t// check for an escape character before a pause value\n\t\t\t\t\t\t\t// format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n\t\t\t\t\t\t\t// single ^ are removed from string\n\t\t\t\t\t\t\tif (substr.charAt(0) === '^') {\n\t\t\t\t\t\t\t\tif (/^\\^\\d+/.test(substr)) {\n\t\t\t\t\t\t\t\t\tvar skip = 1; // skip at least 1\n\t\t\t\t\t\t\t\t\tsubstr = /\\d+/.exec(substr)[0];\n\t\t\t\t\t\t\t\t\tskip += substr.length;\n\t\t\t\t\t\t\t\t\tpauseTime = parseInt(substr);\n\t\t\t\t\t\t\t\t\t_this2.temporaryPause = true;\n\t\t\t\t\t\t\t\t\t_this2.options.onTypingPaused(_this2.arrayPos, _this2);\n\t\t\t\t\t\t\t\t\t// strip out the escape character and pause value so they're not printed\n\t\t\t\t\t\t\t\t\tcurString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);\n\t\t\t\t\t\t\t\t\t_this2.toggleBlinking(true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// check for skip characters formatted as\n\t\t\t\t\t\t\t// \"this is a `string to print NOW` ...\"\n\t\t\t\t\t\t\tif (substr.charAt(0) === '`') {\n\t\t\t\t\t\t\t\twhile (curString.substr(curStrPos + numChars).charAt(0) !== '`') {\n\t\t\t\t\t\t\t\t\tnumChars++;\n\t\t\t\t\t\t\t\t\tif (curStrPos + numChars > curString.length) break;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// strip out the escape characters and append all the string in between\n\t\t\t\t\t\t\t\tvar stringBeforeSkip = curString.substring(0, curStrPos);\n\t\t\t\t\t\t\t\tvar stringSkipped = curString.substring(stringBeforeSkip.length + 1, curStrPos + numChars);\n\t\t\t\t\t\t\t\tvar stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n\t\t\t\t\t\t\t\tcurString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n\t\t\t\t\t\t\t\tnumChars--;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// timeout for any pause after a character\n\t\t\t\t\t\t\t_this2.timeout = setTimeout(function () {\n\t\t\t\t\t\t\t\t// Accounts for blinking while paused\n\t\t\t\t\t\t\t\t_this2.toggleBlinking(false);\n\n\t\t\t\t\t\t\t\t// We're done with this sentence!\n\t\t\t\t\t\t\t\tif (curStrPos === curString.length) {\n\t\t\t\t\t\t\t\t\t_this2.doneTyping(curString, curStrPos);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t_this2.keepTyping(curString, curStrPos, numChars);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// end of character pause\n\t\t\t\t\t\t\t\tif (_this2.temporaryPause) {\n\t\t\t\t\t\t\t\t\t_this2.temporaryPause = false;\n\t\t\t\t\t\t\t\t\t_this2.options.onTypingResumed(_this2.arrayPos, _this2);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}, pauseTime);\n\n\t\t\t\t\t\t\t// humanized value for typing\n\t\t\t\t\t\t}, humanize);\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Continue to the next string & begin typing\n      * @param {string} curString the current string in the strings array\n      * @param {number} curStrPos the current position in the curString\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'keepTyping',\n\t\t\t\t\tvalue: function keepTyping(curString, curStrPos, numChars) {\n\t\t\t\t\t\t// call before functions if applicable\n\t\t\t\t\t\tif (curStrPos === 0) {\n\t\t\t\t\t\t\tthis.toggleBlinking(false);\n\t\t\t\t\t\t\tthis.options.preStringTyped(this.arrayPos, this);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// start typing each new char into existing string\n\t\t\t\t\t\t// curString: arg, this.el.html: original text inside element\n\t\t\t\t\t\tcurStrPos += numChars;\n\t\t\t\t\t\tvar nextString = curString.substr(0, curStrPos);\n\t\t\t\t\t\tthis.replaceText(nextString);\n\t\t\t\t\t\t// loop the function\n\t\t\t\t\t\tthis.typewrite(curString, curStrPos);\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * We're done typing all strings\n      * @param {string} curString the current string in the strings array\n      * @param {number} curStrPos the current position in the curString\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'doneTyping',\n\t\t\t\t\tvalue: function doneTyping(curString, curStrPos) {\n\t\t\t\t\t\tvar _this3 = this;\n\n\t\t\t\t\t\t// fires callback function\n\t\t\t\t\t\tthis.options.onStringTyped(this.arrayPos, this);\n\t\t\t\t\t\tthis.toggleBlinking(true);\n\t\t\t\t\t\t// is this the final string\n\t\t\t\t\t\tif (this.arrayPos === this.strings.length - 1) {\n\t\t\t\t\t\t\t// callback that occurs on the last typed string\n\t\t\t\t\t\t\tthis.complete();\n\t\t\t\t\t\t\t// quit if we wont loop back\n\t\t\t\t\t\t\tif (this.loop === false || this.curLoop === this.loopCount) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.timeout = setTimeout(function () {\n\t\t\t\t\t\t\t_this3.backspace(curString, curStrPos);\n\t\t\t\t\t\t}, this.backDelay);\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Backspaces 1 character at a time\n      * @param {string} curString the current string in the strings array\n      * @param {number} curStrPos the current position in the curString\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'backspace',\n\t\t\t\t\tvalue: function backspace(curString, curStrPos) {\n\t\t\t\t\t\tvar _this4 = this;\n\n\t\t\t\t\t\tif (this.pause.status === true) {\n\t\t\t\t\t\t\tthis.setPauseStatus(curString, curStrPos, true);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.fadeOut) return this.initFadeOut();\n\n\t\t\t\t\t\tthis.toggleBlinking(false);\n\t\t\t\t\t\tvar humanize = this.humanizer(this.backSpeed);\n\n\t\t\t\t\t\tthis.timeout = setTimeout(function () {\n\t\t\t\t\t\t\tcurStrPos = _htmlParserJs.htmlParser.backSpaceHtmlChars(curString, curStrPos, _this4);\n\t\t\t\t\t\t\t// replace text with base text + typed characters\n\t\t\t\t\t\t\tvar curStringAtPosition = curString.substr(0, curStrPos);\n\t\t\t\t\t\t\t_this4.replaceText(curStringAtPosition);\n\n\t\t\t\t\t\t\t// if smartBack is enabled\n\t\t\t\t\t\t\tif (_this4.smartBackspace) {\n\t\t\t\t\t\t\t\t// the remaining part of the current string is equal of the same part of the new string\n\t\t\t\t\t\t\t\tvar nextString = _this4.strings[_this4.arrayPos + 1];\n\t\t\t\t\t\t\t\tif (nextString && curStringAtPosition === nextString.substr(0, curStrPos)) {\n\t\t\t\t\t\t\t\t\t_this4.stopNum = curStrPos;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t_this4.stopNum = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// if the number (id of character in current string) is\n\t\t\t\t\t\t\t// less than the stop number, keep going\n\t\t\t\t\t\t\tif (curStrPos > _this4.stopNum) {\n\t\t\t\t\t\t\t\t// subtract characters one by one\n\t\t\t\t\t\t\t\tcurStrPos--;\n\t\t\t\t\t\t\t\t// loop the function\n\t\t\t\t\t\t\t\t_this4.backspace(curString, curStrPos);\n\t\t\t\t\t\t\t} else if (curStrPos <= _this4.stopNum) {\n\t\t\t\t\t\t\t\t// if the stop number has been reached, increase\n\t\t\t\t\t\t\t\t// array position to next string\n\t\t\t\t\t\t\t\t_this4.arrayPos++;\n\t\t\t\t\t\t\t\t// When looping, begin at the beginning after backspace complete\n\t\t\t\t\t\t\t\tif (_this4.arrayPos === _this4.strings.length) {\n\t\t\t\t\t\t\t\t\t_this4.arrayPos = 0;\n\t\t\t\t\t\t\t\t\t_this4.options.onLastStringBackspaced();\n\t\t\t\t\t\t\t\t\t_this4.shuffleStringsIfNeeded();\n\t\t\t\t\t\t\t\t\t_this4.begin();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t_this4.typewrite(_this4.strings[_this4.sequence[_this4.arrayPos]], curStrPos);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// humanized value for typing\n\t\t\t\t\t\t}, humanize);\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Full animation is complete\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'complete',\n\t\t\t\t\tvalue: function complete() {\n\t\t\t\t\t\tthis.options.onComplete(this);\n\t\t\t\t\t\tif (this.loop) {\n\t\t\t\t\t\t\tthis.curLoop++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.typingComplete = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Has the typing been stopped\n      * @param {string} curString the current string in the strings array\n      * @param {number} curStrPos the current position in the curString\n      * @param {boolean} isTyping\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'setPauseStatus',\n\t\t\t\t\tvalue: function setPauseStatus(curString, curStrPos, isTyping) {\n\t\t\t\t\t\tthis.pause.typewrite = isTyping;\n\t\t\t\t\t\tthis.pause.curString = curString;\n\t\t\t\t\t\tthis.pause.curStrPos = curStrPos;\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Toggle the blinking cursor\n      * @param {boolean} isBlinking\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'toggleBlinking',\n\t\t\t\t\tvalue: function toggleBlinking(isBlinking) {\n\t\t\t\t\t\tif (!this.cursor) return;\n\t\t\t\t\t\t// if in paused state, don't toggle blinking a 2nd time\n\t\t\t\t\t\tif (this.pause.status) return;\n\t\t\t\t\t\tif (this.cursorBlinking === isBlinking) return;\n\t\t\t\t\t\tthis.cursorBlinking = isBlinking;\n\t\t\t\t\t\tvar status = isBlinking ? 'infinite' : 0;\n\t\t\t\t\t\tthis.cursor.style.animationIterationCount = status;\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Speed in MS to type\n      * @param {number} speed\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'humanizer',\n\t\t\t\t\tvalue: function humanizer(speed) {\n\t\t\t\t\t\treturn Math.round(Math.random() * speed / 2) + speed;\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Shuffle the sequence of the strings array\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'shuffleStringsIfNeeded',\n\t\t\t\t\tvalue: function shuffleStringsIfNeeded() {\n\t\t\t\t\t\tif (!this.shuffle) return;\n\t\t\t\t\t\tthis.sequence = this.sequence.sort(function () {\n\t\t\t\t\t\t\treturn Math.random() - 0.5;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Adds a CSS class to fade out current string\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'initFadeOut',\n\t\t\t\t\tvalue: function initFadeOut() {\n\t\t\t\t\t\tvar _this5 = this;\n\n\t\t\t\t\t\tthis.el.className += ' ' + this.fadeOutClass;\n\t\t\t\t\t\tif (this.cursor) this.cursor.className += ' ' + this.fadeOutClass;\n\t\t\t\t\t\treturn setTimeout(function () {\n\t\t\t\t\t\t\t_this5.arrayPos++;\n\t\t\t\t\t\t\t_this5.replaceText('');\n\n\t\t\t\t\t\t\t// Resets current string if end of loop reached\n\t\t\t\t\t\t\tif (_this5.strings.length > _this5.arrayPos) {\n\t\t\t\t\t\t\t\t_this5.typewrite(_this5.strings[_this5.sequence[_this5.arrayPos]], 0);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t_this5.typewrite(_this5.strings[0], 0);\n\t\t\t\t\t\t\t\t_this5.arrayPos = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, this.fadeOutDelay);\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Replaces current text in the HTML element\n      * depending on element type\n      * @param {string} str\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'replaceText',\n\t\t\t\t\tvalue: function replaceText(str) {\n\t\t\t\t\t\tif (this.attr) {\n\t\t\t\t\t\t\tthis.el.setAttribute(this.attr, str);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (this.isInput) {\n\t\t\t\t\t\t\t\tthis.el.value = str;\n\t\t\t\t\t\t\t} else if (this.contentType === 'html') {\n\t\t\t\t\t\t\t\tthis.el.innerHTML = str;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.el.textContent = str;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * If using input elements, bind focus in order to\n      * start and stop the animation\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'bindFocusEvents',\n\t\t\t\t\tvalue: function bindFocusEvents() {\n\t\t\t\t\t\tvar _this6 = this;\n\n\t\t\t\t\t\tif (!this.isInput) return;\n\t\t\t\t\t\tthis.el.addEventListener('focus', function (e) {\n\t\t\t\t\t\t\t_this6.stop();\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis.el.addEventListener('blur', function (e) {\n\t\t\t\t\t\t\tif (_this6.el.value && _this6.el.value.length !== 0) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_this6.start();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * On init, insert the cursor element\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'insertCursor',\n\t\t\t\t\tvalue: function insertCursor() {\n\t\t\t\t\t\tif (!this.showCursor) return;\n\t\t\t\t\t\tif (this.cursor) return;\n\t\t\t\t\t\tthis.cursor = document.createElement('span');\n\t\t\t\t\t\tthis.cursor.className = 'typed-cursor';\n\t\t\t\t\t\tthis.cursor.innerHTML = this.cursorChar;\n\t\t\t\t\t\tthis.el.parentNode && this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Typed;\n\t\t\t}();\n\n\t\t\texports['default'] = Typed;\n\t\t\tmodule.exports = exports['default'];\n\n\t\t\t/***/\n\t\t},\n\t\t/* 1 */\n\t\t/***/function (module, exports, __webpack_require__) {\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, '__esModule', {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _extends = Object.assign || function (target) {\n\t\t\t\tfor (var i = 1; i < arguments.length; i++) {\n\t\t\t\t\tvar source = arguments[i];for (var key in source) {\n\t\t\t\t\t\tif (Object.prototype.hasOwnProperty.call(source, key)) {\n\t\t\t\t\t\t\ttarget[key] = source[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}return target;\n\t\t\t};\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tfunction _interopRequireDefault(obj) {\n\t\t\t\treturn obj && obj.__esModule ? obj : { 'default': obj };\n\t\t\t}\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError('Cannot call a class as a function');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar _defaultsJs = __webpack_require__(2);\n\n\t\t\tvar _defaultsJs2 = _interopRequireDefault(_defaultsJs);\n\n\t\t\t/**\n    * Initialize the Typed object\n    */\n\n\t\t\tvar Initializer = function () {\n\t\t\t\tfunction Initializer() {\n\t\t\t\t\t_classCallCheck(this, Initializer);\n\t\t\t\t}\n\n\t\t\t\t_createClass(Initializer, [{\n\t\t\t\t\tkey: 'load',\n\n\t\t\t\t\t/**\n      * Load up defaults & options on the Typed instance\n      * @param {Typed} self instance of Typed\n      * @param {object} options options object\n      * @param {string} elementId HTML element ID _OR_ instance of HTML element\n      * @private\n      */\n\n\t\t\t\t\tvalue: function load(self, options, elementId) {\n\t\t\t\t\t\t// chosen element to manipulate text\n\t\t\t\t\t\tif (typeof elementId === 'string') {\n\t\t\t\t\t\t\tself.el = document.querySelector(elementId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.el = elementId;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.options = _extends({}, _defaultsJs2['default'], options);\n\n\t\t\t\t\t\t// attribute to type into\n\t\t\t\t\t\tself.isInput = self.el.tagName.toLowerCase() === 'input';\n\t\t\t\t\t\tself.attr = self.options.attr;\n\t\t\t\t\t\tself.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n\t\t\t\t\t\t// show cursor\n\t\t\t\t\t\tself.showCursor = self.isInput ? false : self.options.showCursor;\n\n\t\t\t\t\t\t// custom cursor\n\t\t\t\t\t\tself.cursorChar = self.options.cursorChar;\n\n\t\t\t\t\t\t// Is the cursor blinking\n\t\t\t\t\t\tself.cursorBlinking = true;\n\n\t\t\t\t\t\t// text content of element\n\t\t\t\t\t\tself.elContent = self.attr ? self.el.getAttribute(self.attr) : self.el.textContent;\n\n\t\t\t\t\t\t// html or plain text\n\t\t\t\t\t\tself.contentType = self.options.contentType;\n\n\t\t\t\t\t\t// typing speed\n\t\t\t\t\t\tself.typeSpeed = self.options.typeSpeed;\n\n\t\t\t\t\t\t// add a delay before typing starts\n\t\t\t\t\t\tself.startDelay = self.options.startDelay;\n\n\t\t\t\t\t\t// backspacing speed\n\t\t\t\t\t\tself.backSpeed = self.options.backSpeed;\n\n\t\t\t\t\t\t// only backspace what doesn't match the previous string\n\t\t\t\t\t\tself.smartBackspace = self.options.smartBackspace;\n\n\t\t\t\t\t\t// amount of time to wait before backspacing\n\t\t\t\t\t\tself.backDelay = self.options.backDelay;\n\n\t\t\t\t\t\t// Fade out instead of backspace\n\t\t\t\t\t\tself.fadeOut = self.options.fadeOut;\n\t\t\t\t\t\tself.fadeOutClass = self.options.fadeOutClass;\n\t\t\t\t\t\tself.fadeOutDelay = self.options.fadeOutDelay;\n\n\t\t\t\t\t\t// variable to check whether typing is currently paused\n\t\t\t\t\t\tself.isPaused = false;\n\n\t\t\t\t\t\t// input strings of text\n\t\t\t\t\t\tself.strings = self.options.strings.map(function (s) {\n\t\t\t\t\t\t\treturn s.trim();\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// div containing strings\n\t\t\t\t\t\tif (typeof self.options.stringsElement === 'string') {\n\t\t\t\t\t\t\tself.stringsElement = document.querySelector(self.options.stringsElement);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tself.stringsElement = self.options.stringsElement;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (self.stringsElement) {\n\t\t\t\t\t\t\tself.strings = [];\n\t\t\t\t\t\t\tself.stringsElement.style.display = 'none';\n\t\t\t\t\t\t\tvar strings = Array.prototype.slice.apply(self.stringsElement.children);\n\t\t\t\t\t\t\tvar stringsLength = strings.length;\n\n\t\t\t\t\t\t\tif (stringsLength) {\n\t\t\t\t\t\t\t\tfor (var i = 0; i < stringsLength; i += 1) {\n\t\t\t\t\t\t\t\t\tvar stringEl = strings[i];\n\t\t\t\t\t\t\t\t\tself.strings.push(stringEl.innerHTML.trim());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// character number position of current string\n\t\t\t\t\t\tself.strPos = 0;\n\n\t\t\t\t\t\t// current array position\n\t\t\t\t\t\tself.arrayPos = 0;\n\n\t\t\t\t\t\t// index of string to stop backspacing on\n\t\t\t\t\t\tself.stopNum = 0;\n\n\t\t\t\t\t\t// Looping logic\n\t\t\t\t\t\tself.loop = self.options.loop;\n\t\t\t\t\t\tself.loopCount = self.options.loopCount;\n\t\t\t\t\t\tself.curLoop = 0;\n\n\t\t\t\t\t\t// shuffle the strings\n\t\t\t\t\t\tself.shuffle = self.options.shuffle;\n\t\t\t\t\t\t// the order of strings\n\t\t\t\t\t\tself.sequence = [];\n\n\t\t\t\t\t\tself.pause = {\n\t\t\t\t\t\t\tstatus: false,\n\t\t\t\t\t\t\ttypewrite: true,\n\t\t\t\t\t\t\tcurString: '',\n\t\t\t\t\t\t\tcurStrPos: 0\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// When the typing is complete (when not looped)\n\t\t\t\t\t\tself.typingComplete = false;\n\n\t\t\t\t\t\t// Set the order in which the strings are typed\n\t\t\t\t\t\tfor (var i in self.strings) {\n\t\t\t\t\t\t\tself.sequence[i] = i;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If there is some text in the element\n\t\t\t\t\t\tself.currentElContent = this.getCurrentElContent(self);\n\n\t\t\t\t\t\tself.autoInsertCss = self.options.autoInsertCss;\n\n\t\t\t\t\t\tthis.appendAnimationCss(self);\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'getCurrentElContent',\n\t\t\t\t\tvalue: function getCurrentElContent(self) {\n\t\t\t\t\t\tvar elContent = '';\n\t\t\t\t\t\tif (self.attr) {\n\t\t\t\t\t\t\telContent = self.el.getAttribute(self.attr);\n\t\t\t\t\t\t} else if (self.isInput) {\n\t\t\t\t\t\t\telContent = self.el.value;\n\t\t\t\t\t\t} else if (self.contentType === 'html') {\n\t\t\t\t\t\t\telContent = self.el.innerHTML;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telContent = self.el.textContent;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn elContent;\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'appendAnimationCss',\n\t\t\t\t\tvalue: function appendAnimationCss(self) {\n\t\t\t\t\t\tif (!self.autoInsertCss) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!self.showCursor || !self.fadeOut) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar css = document.createElement('style');\n\t\t\t\t\t\tcss.type = 'text/css';\n\t\t\t\t\t\tvar innerCss = '';\n\t\t\t\t\t\tif (self.showCursor) {\n\t\t\t\t\t\t\tinnerCss += '\\n        .typed-cursor{\\n          opacity: 1;\\n          animation: typedjsBlink 0.7s infinite;\\n          -webkit-animation: typedjsBlink 0.7s infinite;\\n                  animation: typedjsBlink 0.7s infinite;\\n        }\\n        @keyframes typedjsBlink{\\n          50% { opacity: 0.0; }\\n        }\\n        @-webkit-keyframes typedjsBlink{\\n          0% { opacity: 1; }\\n          50% { opacity: 0.0; }\\n          100% { opacity: 1; }\\n        }\\n      ';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (self.fadeOut) {\n\t\t\t\t\t\t\tinnerCss += '\\n        .typed-fade-out{\\n          opacity: 0;\\n          transition: opacity .25s;\\n          -webkit-animation: 0;\\n                  animation: 0;\\n        }\\n      ';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (css.length === 0) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcss.innerHTML = innerCss;\n\t\t\t\t\t\tdocument.head.appendChild(css);\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn Initializer;\n\t\t\t}();\n\n\t\t\texports['default'] = Initializer;\n\t\t\tvar initializer = new Initializer();\n\t\t\texports.initializer = initializer;\n\n\t\t\t/***/\n\t\t},\n\t\t/* 2 */\n\t\t/***/function (module, exports) {\n\n\t\t\t/**\n    * Defaults & options\n    * @returns {object} Typed defaults & options\n    * @public\n    */\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, '__esModule', {\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t\tvar defaults = {\n\t\t\t\t/**\n     * @property {array} strings strings to be typed\n     * @property {string} stringsElement ID of element containing string children\n     */\n\t\t\t\tstrings: ['These are the default values...', 'You know what you should do?', 'Use your own!', 'Have a great day!'],\n\t\t\t\tstringsElement: null,\n\n\t\t\t\t/**\n     * @property {number} typeSpeed type speed in milliseconds\n     */\n\t\t\t\ttypeSpeed: 0,\n\n\t\t\t\t/**\n     * @property {number} startDelay time before typing starts in milliseconds\n     */\n\t\t\t\tstartDelay: 0,\n\n\t\t\t\t/**\n     * @property {number} backSpeed backspacing speed in milliseconds\n     */\n\t\t\t\tbackSpeed: 0,\n\n\t\t\t\t/**\n     * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n     */\n\t\t\t\tsmartBackspace: true,\n\n\t\t\t\t/**\n     * @property {boolean} shuffle shuffle the strings\n     */\n\t\t\t\tshuffle: false,\n\n\t\t\t\t/**\n     * @property {number} backDelay time before backspacing in milliseconds\n     */\n\t\t\t\tbackDelay: 700,\n\n\t\t\t\t/**\n     * @property {boolean} fadeOut Fade out instead of backspace\n     * @property {string} fadeOutClass css class for fade animation\n     * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n     */\n\t\t\t\tfadeOut: false,\n\t\t\t\tfadeOutClass: 'typed-fade-out',\n\t\t\t\tfadeOutDelay: 500,\n\n\t\t\t\t/**\n     * @property {boolean} loop loop strings\n     * @property {number} loopCount amount of loops\n     */\n\t\t\t\tloop: false,\n\t\t\t\tloopCount: Infinity,\n\n\t\t\t\t/**\n     * @property {boolean} showCursor show cursor\n     * @property {string} cursorChar character for cursor\n     * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n     */\n\t\t\t\tshowCursor: true,\n\t\t\t\tcursorChar: '|',\n\t\t\t\tautoInsertCss: true,\n\n\t\t\t\t/**\n     * @property {string} attr attribute for typing\n     * Ex: input placeholder, value, or just HTML text\n     */\n\t\t\t\tattr: null,\n\n\t\t\t\t/**\n     * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n     */\n\t\t\t\tbindInputFocusEvents: false,\n\n\t\t\t\t/**\n     * @property {string} contentType 'html' or 'null' for plaintext\n     */\n\t\t\t\tcontentType: 'html',\n\n\t\t\t\t/**\n     * All typing is complete\n     * @param {Typed} self\n     */\n\t\t\t\tonComplete: function onComplete(self) {},\n\n\t\t\t\t/**\n     * Before each string is typed\n     * @param {number} arrayPos\n     * @param {Typed} self\n     */\n\t\t\t\tpreStringTyped: function preStringTyped(arrayPos, self) {},\n\n\t\t\t\t/**\n     * After each string is typed\n     * @param {number} arrayPos\n     * @param {Typed} self\n     */\n\t\t\t\tonStringTyped: function onStringTyped(arrayPos, self) {},\n\n\t\t\t\t/**\n     * During looping, after last string is typed\n     * @param {Typed} self\n     */\n\t\t\t\tonLastStringBackspaced: function onLastStringBackspaced(self) {},\n\n\t\t\t\t/**\n     * Typing has been stopped\n     * @param {number} arrayPos\n     * @param {Typed} self\n     */\n\t\t\t\tonTypingPaused: function onTypingPaused(arrayPos, self) {},\n\n\t\t\t\t/**\n     * Typing has been started after being stopped\n     * @param {number} arrayPos\n     * @param {Typed} self\n     */\n\t\t\t\tonTypingResumed: function onTypingResumed(arrayPos, self) {},\n\n\t\t\t\t/**\n     * After reset\n     * @param {Typed} self\n     */\n\t\t\t\tonReset: function onReset(self) {},\n\n\t\t\t\t/**\n     * After stop\n     * @param {number} arrayPos\n     * @param {Typed} self\n     */\n\t\t\t\tonStop: function onStop(arrayPos, self) {},\n\n\t\t\t\t/**\n     * After start\n     * @param {number} arrayPos\n     * @param {Typed} self\n     */\n\t\t\t\tonStart: function onStart(arrayPos, self) {},\n\n\t\t\t\t/**\n     * After destroy\n     * @param {Typed} self\n     */\n\t\t\t\tonDestroy: function onDestroy(self) {}\n\t\t\t};\n\n\t\t\texports['default'] = defaults;\n\t\t\tmodule.exports = exports['default'];\n\n\t\t\t/***/\n\t\t},\n\t\t/* 3 */\n\t\t/***/function (module, exports) {\n\n\t\t\t/**\n    * TODO: These methods can probably be combined somehow\n    * Parse HTML tags & HTML Characters\n    */\n\n\t\t\t'use strict';\n\n\t\t\tObject.defineProperty(exports, '__esModule', {\n\t\t\t\tvalue: true\n\t\t\t});\n\n\t\t\tvar _createClass = function () {\n\t\t\t\tfunction defineProperties(target, props) {\n\t\t\t\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\t\t\t\tvar descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);\n\t\t\t\t\t}\n\t\t\t\t}return function (Constructor, protoProps, staticProps) {\n\t\t\t\t\tif (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;\n\t\t\t\t};\n\t\t\t}();\n\n\t\t\tfunction _classCallCheck(instance, Constructor) {\n\t\t\t\tif (!(instance instanceof Constructor)) {\n\t\t\t\t\tthrow new TypeError('Cannot call a class as a function');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar HTMLParser = function () {\n\t\t\t\tfunction HTMLParser() {\n\t\t\t\t\t_classCallCheck(this, HTMLParser);\n\t\t\t\t}\n\n\t\t\t\t_createClass(HTMLParser, [{\n\t\t\t\t\tkey: 'typeHtmlChars',\n\n\t\t\t\t\t/**\n      * Type HTML tags & HTML Characters\n      * @param {string} curString Current string\n      * @param {number} curStrPos Position in current string\n      * @param {Typed} self instance of Typed\n      * @returns {number} a new string position\n      * @private\n      */\n\n\t\t\t\t\tvalue: function typeHtmlChars(curString, curStrPos, self) {\n\t\t\t\t\t\tif (self.contentType !== 'html') return curStrPos;\n\t\t\t\t\t\tvar curChar = curString.substr(curStrPos).charAt(0);\n\t\t\t\t\t\tif (curChar === '<' || curChar === '&') {\n\t\t\t\t\t\t\tvar endTag = '';\n\t\t\t\t\t\t\tif (curChar === '<') {\n\t\t\t\t\t\t\t\tendTag = '>';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tendTag = ';';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twhile (curString.substr(curStrPos + 1).charAt(0) !== endTag) {\n\t\t\t\t\t\t\t\tcurStrPos++;\n\t\t\t\t\t\t\t\tif (curStrPos + 1 > curString.length) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcurStrPos++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn curStrPos;\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n      * Backspace HTML tags and HTML Characters\n      * @param {string} curString Current string\n      * @param {number} curStrPos Position in current string\n      * @param {Typed} self instance of Typed\n      * @returns {number} a new string position\n      * @private\n      */\n\t\t\t\t}, {\n\t\t\t\t\tkey: 'backSpaceHtmlChars',\n\t\t\t\t\tvalue: function backSpaceHtmlChars(curString, curStrPos, self) {\n\t\t\t\t\t\tif (self.contentType !== 'html') return curStrPos;\n\t\t\t\t\t\tvar curChar = curString.substr(curStrPos).charAt(0);\n\t\t\t\t\t\tif (curChar === '>' || curChar === ';') {\n\t\t\t\t\t\t\tvar endTag = '';\n\t\t\t\t\t\t\tif (curChar === '>') {\n\t\t\t\t\t\t\t\tendTag = '<';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tendTag = '&';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twhile (curString.substr(curStrPos - 1).charAt(0) !== endTag) {\n\t\t\t\t\t\t\t\tcurStrPos--;\n\t\t\t\t\t\t\t\tif (curStrPos < 0) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcurStrPos--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn curStrPos;\n\t\t\t\t\t}\n\t\t\t\t}]);\n\n\t\t\t\treturn HTMLParser;\n\t\t\t}();\n\n\t\t\texports['default'] = HTMLParser;\n\t\t\tvar htmlParser = new HTMLParser();\n\t\t\texports.htmlParser = htmlParser;\n\n\t\t\t/***/\n\t\t}]\n\t\t/******/)\n\t);\n});\n;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function () {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function get() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function get() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiY2hpbGRyZW4iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJsIiwiaSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFTRCxNQUFULEVBQWlCO0FBQ2pDLEtBQUcsQ0FBQ0EsT0FBT0UsZUFBWCxFQUE0QjtBQUMzQkYsU0FBT0csU0FBUCxHQUFtQixZQUFXLENBQUUsQ0FBaEM7QUFDQUgsU0FBT0ksS0FBUCxHQUFlLEVBQWY7QUFDQTtBQUNBLE1BQUcsQ0FBQ0osT0FBT0ssUUFBWCxFQUFxQkwsT0FBT0ssUUFBUCxHQUFrQixFQUFsQjtBQUNyQkMsU0FBT0MsY0FBUCxDQUFzQlAsTUFBdEIsRUFBOEIsUUFBOUIsRUFBd0M7QUFDdkNRLGVBQVksSUFEMkI7QUFFdkNDLFFBQUssZUFBVztBQUNmLFdBQU9ULE9BQU9VLENBQWQ7QUFDQTtBQUpzQyxHQUF4QztBQU1BSixTQUFPQyxjQUFQLENBQXNCUCxNQUF0QixFQUE4QixJQUE5QixFQUFvQztBQUNuQ1EsZUFBWSxJQUR1QjtBQUVuQ0MsUUFBSyxlQUFXO0FBQ2YsV0FBT1QsT0FBT1csQ0FBZDtBQUNBO0FBSmtDLEdBQXBDO0FBTUFYLFNBQU9FLGVBQVAsR0FBeUIsQ0FBekI7QUFDQTtBQUNELFFBQU9GLE1BQVA7QUFDQSxDQXJCRCIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n 2017 Julian Garnier\n Released under the MIT license\n*/\nvar $jscomp = { scope: {} };$jscomp.defineProperty = \"function\" == typeof Object.defineProperties ? Object.defineProperty : function (e, r, p) {\n  if (p.get || p.set) throw new TypeError(\"ES3 does not support getters and setters.\");e != Array.prototype && e != Object.prototype && (e[r] = p.value);\n};$jscomp.getGlobal = function (e) {\n  return \"undefined\" != typeof window && window === e ? e : \"undefined\" != typeof global && null != global ? global : e;\n};$jscomp.global = $jscomp.getGlobal(undefined);$jscomp.SYMBOL_PREFIX = \"jscomp_symbol_\";\n$jscomp.initSymbol = function () {\n  $jscomp.initSymbol = function () {};$jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);\n};$jscomp.symbolCounter_ = 0;$jscomp.Symbol = function (e) {\n  return $jscomp.SYMBOL_PREFIX + (e || \"\") + $jscomp.symbolCounter_++;\n};\n$jscomp.initSymbolIterator = function () {\n  $jscomp.initSymbol();var e = $jscomp.global.Symbol.iterator;e || (e = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol(\"iterator\"));\"function\" != typeof Array.prototype[e] && $jscomp.defineProperty(Array.prototype, e, { configurable: !0, writable: !0, value: function value() {\n      return $jscomp.arrayIterator(this);\n    } });$jscomp.initSymbolIterator = function () {};\n};$jscomp.arrayIterator = function (e) {\n  var r = 0;return $jscomp.iteratorPrototype(function () {\n    return r < e.length ? { done: !1, value: e[r++] } : { done: !0 };\n  });\n};\n$jscomp.iteratorPrototype = function (e) {\n  $jscomp.initSymbolIterator();e = { next: e };e[$jscomp.global.Symbol.iterator] = function () {\n    return this;\n  };return e;\n};$jscomp.array = $jscomp.array || {};$jscomp.iteratorFromArray = function (e, r) {\n  $jscomp.initSymbolIterator();e instanceof String && (e += \"\");var p = 0,\n      m = { next: function next() {\n      if (p < e.length) {\n        var u = p++;return { value: r(u, e[u]), done: !1 };\n      }m.next = function () {\n        return { done: !0, value: void 0 };\n      };return m.next();\n    } };m[Symbol.iterator] = function () {\n    return m;\n  };return m;\n};\n$jscomp.polyfill = function (e, r, p, m) {\n  if (r) {\n    p = $jscomp.global;e = e.split(\".\");for (m = 0; m < e.length - 1; m++) {\n      var u = e[m];u in p || (p[u] = {});p = p[u];\n    }e = e[e.length - 1];m = p[e];r = r(m);r != m && null != r && $jscomp.defineProperty(p, e, { configurable: !0, writable: !0, value: r });\n  }\n};$jscomp.polyfill(\"Array.prototype.keys\", function (e) {\n  return e ? e : function () {\n    return $jscomp.iteratorFromArray(this, function (e) {\n      return e;\n    });\n  };\n}, \"es6-impl\", \"es3\");var $jscomp$this = undefined;\n(function (e, r) {\n   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (r),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : \"object\" === (typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) && module.exports ? module.exports = r() : e.anime = r();\n})(undefined, function () {\n  function e(a) {\n    if (!h.col(a)) try {\n      return document.querySelectorAll(a);\n    } catch (c) {}\n  }function r(a, c) {\n    for (var d = a.length, b = 2 <= arguments.length ? arguments[1] : void 0, f = [], n = 0; n < d; n++) {\n      if (n in a) {\n        var k = a[n];c.call(b, k, n, a) && f.push(k);\n      }\n    }return f;\n  }function p(a) {\n    return a.reduce(function (a, d) {\n      return a.concat(h.arr(d) ? p(d) : d);\n    }, []);\n  }function m(a) {\n    if (h.arr(a)) return a;\n    h.str(a) && (a = e(a) || a);return a instanceof NodeList || a instanceof HTMLCollection ? [].slice.call(a) : [a];\n  }function u(a, c) {\n    return a.some(function (a) {\n      return a === c;\n    });\n  }function C(a) {\n    var c = {},\n        d;for (d in a) {\n      c[d] = a[d];\n    }return c;\n  }function D(a, c) {\n    var d = C(a),\n        b;for (b in a) {\n      d[b] = c.hasOwnProperty(b) ? c[b] : a[b];\n    }return d;\n  }function z(a, c) {\n    var d = C(a),\n        b;for (b in c) {\n      d[b] = h.und(a[b]) ? c[b] : a[b];\n    }return d;\n  }function T(a) {\n    a = a.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, function (a, c, d, k) {\n      return c + c + d + d + k + k;\n    });var c = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(a);\n    a = parseInt(c[1], 16);var d = parseInt(c[2], 16),\n        c = parseInt(c[3], 16);return \"rgba(\" + a + \",\" + d + \",\" + c + \",1)\";\n  }function U(a) {\n    function c(a, c, b) {\n      0 > b && (b += 1);1 < b && --b;return b < 1 / 6 ? a + 6 * (c - a) * b : .5 > b ? c : b < 2 / 3 ? a + (c - a) * (2 / 3 - b) * 6 : a;\n    }var d = /hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)/g.exec(a) || /hsla\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%,\\s*([\\d.]+)\\)/g.exec(a);a = parseInt(d[1]) / 360;var b = parseInt(d[2]) / 100,\n        f = parseInt(d[3]) / 100,\n        d = d[4] || 1;if (0 == b) f = b = a = f;else {\n      var n = .5 > f ? f * (1 + b) : f + b - f * b,\n          k = 2 * f - n,\n          f = c(k, n, a + 1 / 3),\n          b = c(k, n, a);a = c(k, n, a - 1 / 3);\n    }return \"rgba(\" + 255 * f + \",\" + 255 * b + \",\" + 255 * a + \",\" + d + \")\";\n  }function y(a) {\n    if (a = /([\\+\\-]?[0-9#\\.]+)(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(a)) return a[2];\n  }function V(a) {\n    if (-1 < a.indexOf(\"translate\") || \"perspective\" === a) return \"px\";if (-1 < a.indexOf(\"rotate\") || -1 < a.indexOf(\"skew\")) return \"deg\";\n  }function I(a, c) {\n    return h.fnc(a) ? a(c.target, c.id, c.total) : a;\n  }function E(a, c) {\n    if (c in a.style) return getComputedStyle(a).getPropertyValue(c.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase()) || \"0\";\n  }function J(a, c) {\n    if (h.dom(a) && u(W, c)) return \"transform\";if (h.dom(a) && (a.getAttribute(c) || h.svg(a) && a[c])) return \"attribute\";if (h.dom(a) && \"transform\" !== c && E(a, c)) return \"css\";if (null != a[c]) return \"object\";\n  }function X(a, c) {\n    var d = V(c),\n        d = -1 < c.indexOf(\"scale\") ? 1 : 0 + d;a = a.style.transform;if (!a) return d;for (var b = [], f = [], n = [], k = /(\\w+)\\((.+?)\\)/g; b = k.exec(a);) {\n      f.push(b[1]), n.push(b[2]);\n    }a = r(n, function (a, b) {\n      return f[b] === c;\n    });return a.length ? a[0] : d;\n  }function K(a, c) {\n    switch (J(a, c)) {case \"transform\":\n        return X(a, c);case \"css\":\n        return E(a, c);case \"attribute\":\n        return a.getAttribute(c);}return a[c] || 0;\n  }function L(a, c) {\n    var d = /^(\\*=|\\+=|-=)/.exec(a);if (!d) return a;var b = y(a) || 0;c = parseFloat(c);a = parseFloat(a.replace(d[0], \"\"));switch (d[0][0]) {case \"+\":\n        return c + a + b;case \"-\":\n        return c - a + b;case \"*\":\n        return c * a + b;}\n  }function F(a, c) {\n    return Math.sqrt(Math.pow(c.x - a.x, 2) + Math.pow(c.y - a.y, 2));\n  }function M(a) {\n    a = a.points;for (var c = 0, d, b = 0; b < a.numberOfItems; b++) {\n      var f = a.getItem(b);0 < b && (c += F(d, f));d = f;\n    }return c;\n  }function N(a) {\n    if (a.getTotalLength) return a.getTotalLength();switch (a.tagName.toLowerCase()) {case \"circle\":\n        return 2 * Math.PI * a.getAttribute(\"r\");case \"rect\":\n        return 2 * a.getAttribute(\"width\") + 2 * a.getAttribute(\"height\");case \"line\":\n        return F({ x: a.getAttribute(\"x1\"), y: a.getAttribute(\"y1\") }, { x: a.getAttribute(\"x2\"), y: a.getAttribute(\"y2\") });case \"polyline\":\n        return M(a);case \"polygon\":\n        var c = a.points;return M(a) + F(c.getItem(c.numberOfItems - 1), c.getItem(0));}\n  }function Y(a, c) {\n    function d(b) {\n      b = void 0 === b ? 0 : b;return a.el.getPointAtLength(1 <= c + b ? c + b : 0);\n    }var b = d(),\n        f = d(-1),\n        n = d(1);switch (a.property) {case \"x\":\n        return b.x;case \"y\":\n        return b.y;\n      case \"angle\":\n        return 180 * Math.atan2(n.y - f.y, n.x - f.x) / Math.PI;}\n  }function O(a, c) {\n    var d = /-?\\d*\\.?\\d+/g,\n        b;b = h.pth(a) ? a.totalLength : a;if (h.col(b)) {\n      if (h.rgb(b)) {\n        var f = /rgb\\((\\d+,\\s*[\\d]+,\\s*[\\d]+)\\)/g.exec(b);b = f ? \"rgba(\" + f[1] + \",1)\" : b;\n      } else b = h.hex(b) ? T(b) : h.hsl(b) ? U(b) : void 0;\n    } else f = (f = y(b)) ? b.substr(0, b.length - f.length) : b, b = c && !/\\s/g.test(b) ? f + c : f;b += \"\";return { original: b, numbers: b.match(d) ? b.match(d).map(Number) : [0], strings: h.str(a) || c ? b.split(d) : [] };\n  }function P(a) {\n    a = a ? p(h.arr(a) ? a.map(m) : m(a)) : [];return r(a, function (a, d, b) {\n      return b.indexOf(a) === d;\n    });\n  }function Z(a) {\n    var c = P(a);return c.map(function (a, b) {\n      return { target: a, id: b, total: c.length };\n    });\n  }function aa(a, c) {\n    var d = C(c);if (h.arr(a)) {\n      var b = a.length;2 !== b || h.obj(a[0]) ? h.fnc(c.duration) || (d.duration = c.duration / b) : a = { value: a };\n    }return m(a).map(function (a, b) {\n      b = b ? 0 : c.delay;a = h.obj(a) && !h.pth(a) ? a : { value: a };h.und(a.delay) && (a.delay = b);return a;\n    }).map(function (a) {\n      return z(a, d);\n    });\n  }function ba(a, c) {\n    var d = {},\n        b;for (b in a) {\n      var f = I(a[b], c);h.arr(f) && (f = f.map(function (a) {\n        return I(a, c);\n      }), 1 === f.length && (f = f[0]));d[b] = f;\n    }d.duration = parseFloat(d.duration);d.delay = parseFloat(d.delay);return d;\n  }function ca(a) {\n    return h.arr(a) ? A.apply(this, a) : Q[a];\n  }function da(a, c) {\n    var d;return a.tweens.map(function (b) {\n      b = ba(b, c);var f = b.value,\n          e = K(c.target, a.name),\n          k = d ? d.to.original : e,\n          k = h.arr(f) ? f[0] : k,\n          w = L(h.arr(f) ? f[1] : f, k),\n          e = y(w) || y(k) || y(e);b.from = O(k, e);b.to = O(w, e);b.start = d ? d.end : a.offset;b.end = b.start + b.delay + b.duration;b.easing = ca(b.easing);b.elasticity = (1E3 - Math.min(Math.max(b.elasticity, 1), 999)) / 1E3;b.isPath = h.pth(f);b.isColor = h.col(b.from.original);b.isColor && (b.round = 1);return d = b;\n    });\n  }function ea(a, c) {\n    return r(p(a.map(function (a) {\n      return c.map(function (b) {\n        var c = J(a.target, b.name);if (c) {\n          var d = da(b, a);b = { type: c, property: b.name, animatable: a, tweens: d, duration: d[d.length - 1].end, delay: d[0].delay };\n        } else b = void 0;return b;\n      });\n    })), function (a) {\n      return !h.und(a);\n    });\n  }function R(a, c, d, b) {\n    var f = \"delay\" === a;return c.length ? (f ? Math.min : Math.max).apply(Math, c.map(function (b) {\n      return b[a];\n    })) : f ? b.delay : d.offset + b.delay + b.duration;\n  }function fa(a) {\n    var c = D(ga, a),\n        d = D(S, a),\n        b = Z(a.targets),\n        f = [],\n        e = z(c, d),\n        k;for (k in a) {\n      e.hasOwnProperty(k) || \"targets\" === k || f.push({ name: k, offset: e.offset, tweens: aa(a[k], d) });\n    }a = ea(b, f);return z(c, { children: [], animatables: b, animations: a, duration: R(\"duration\", a, c, d), delay: R(\"delay\", a, c, d) });\n  }function q(a) {\n    function c() {\n      return window.Promise && new Promise(function (a) {\n        return p = a;\n      });\n    }function d(a) {\n      return g.reversed ? g.duration - a : a;\n    }function b(a) {\n      for (var b = 0, c = {}, d = g.animations, f = d.length; b < f;) {\n        var e = d[b],\n            k = e.animatable,\n            h = e.tweens,\n            n = h.length - 1,\n            l = h[n];n && (l = r(h, function (b) {\n          return a < b.end;\n        })[0] || l);for (var h = Math.min(Math.max(a - l.start - l.delay, 0), l.duration) / l.duration, w = isNaN(h) ? 1 : l.easing(h, l.elasticity), h = l.to.strings, p = l.round, n = [], m = void 0, m = l.to.numbers.length, t = 0; t < m; t++) {\n          var x = void 0,\n              x = l.to.numbers[t],\n              q = l.from.numbers[t],\n              x = l.isPath ? Y(l.value, w * x) : q + w * (x - q);p && (l.isColor && 2 < t || (x = Math.round(x * p) / p));n.push(x);\n        }if (l = h.length) for (m = h[0], w = 0; w < l; w++) {\n          p = h[w + 1], t = n[w], isNaN(t) || (m = p ? m + (t + p) : m + (t + \" \"));\n        } else m = n[0];ha[e.type](k.target, e.property, m, c, k.id);e.currentValue = m;b++;\n      }if (b = Object.keys(c).length) for (d = 0; d < b; d++) {\n        H || (H = E(document.body, \"transform\") ? \"transform\" : \"-webkit-transform\"), g.animatables[d].target.style[H] = c[d].join(\" \");\n      }g.currentTime = a;g.progress = a / g.duration * 100;\n    }function f(a) {\n      if (g[a]) g[a](g);\n    }function e() {\n      g.remaining && !0 !== g.remaining && g.remaining--;\n    }function k(a) {\n      var k = g.duration,\n          n = g.offset,\n          w = n + g.delay,\n          r = g.currentTime,\n          x = g.reversed,\n          q = d(a);if (g.children.length) {\n        var u = g.children,\n            v = u.length;\n        if (q >= g.currentTime) for (var G = 0; G < v; G++) {\n          u[G].seek(q);\n        } else for (; v--;) {\n          u[v].seek(q);\n        }\n      }if (q >= w || !k) g.began || (g.began = !0, f(\"begin\")), f(\"run\");if (q > n && q < k) b(q);else if (q <= n && 0 !== r && (b(0), x && e()), q >= k && r !== k || !k) b(k), x || e();f(\"update\");a >= k && (g.remaining ? (t = h, \"alternate\" === g.direction && (g.reversed = !g.reversed)) : (g.pause(), g.completed || (g.completed = !0, f(\"complete\"), \"Promise\" in window && (p(), m = c()))), l = 0);\n    }a = void 0 === a ? {} : a;var h,\n        t,\n        l = 0,\n        p = null,\n        m = c(),\n        g = fa(a);g.reset = function () {\n      var a = g.direction,\n          c = g.loop;g.currentTime = 0;g.progress = 0;g.paused = !0;g.began = !1;g.completed = !1;g.reversed = \"reverse\" === a;g.remaining = \"alternate\" === a && 1 === c ? 2 : c;b(0);for (a = g.children.length; a--;) {\n        g.children[a].reset();\n      }\n    };g.tick = function (a) {\n      h = a;t || (t = h);k((l + h - t) * q.speed);\n    };g.seek = function (a) {\n      k(d(a));\n    };g.pause = function () {\n      var a = v.indexOf(g);-1 < a && v.splice(a, 1);g.paused = !0;\n    };g.play = function () {\n      g.paused && (g.paused = !1, t = 0, l = d(g.currentTime), v.push(g), B || ia());\n    };g.reverse = function () {\n      g.reversed = !g.reversed;t = 0;l = d(g.currentTime);\n    };g.restart = function () {\n      g.pause();\n      g.reset();g.play();\n    };g.finished = m;g.reset();g.autoplay && g.play();return g;\n  }var ga = { update: void 0, begin: void 0, run: void 0, complete: void 0, loop: 1, direction: \"normal\", autoplay: !0, offset: 0 },\n      S = { duration: 1E3, delay: 0, easing: \"easeOutElastic\", elasticity: 500, round: 0 },\n      W = \"translateX translateY translateZ rotate rotateX rotateY rotateZ scale scaleX scaleY scaleZ skewX skewY perspective\".split(\" \"),\n      H,\n      h = { arr: function arr(a) {\n      return Array.isArray(a);\n    }, obj: function obj(a) {\n      return -1 < Object.prototype.toString.call(a).indexOf(\"Object\");\n    },\n    pth: function pth(a) {\n      return h.obj(a) && a.hasOwnProperty(\"totalLength\");\n    }, svg: function svg(a) {\n      return a instanceof SVGElement;\n    }, dom: function dom(a) {\n      return a.nodeType || h.svg(a);\n    }, str: function str(a) {\n      return \"string\" === typeof a;\n    }, fnc: function fnc(a) {\n      return \"function\" === typeof a;\n    }, und: function und(a) {\n      return \"undefined\" === typeof a;\n    }, hex: function hex(a) {\n      return (/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(a)\n      );\n    }, rgb: function rgb(a) {\n      return (/^rgb/.test(a)\n      );\n    }, hsl: function hsl(a) {\n      return (/^hsl/.test(a)\n      );\n    }, col: function col(a) {\n      return h.hex(a) || h.rgb(a) || h.hsl(a);\n    } },\n      A = function () {\n    function a(a, d, b) {\n      return (((1 - 3 * b + 3 * d) * a + (3 * b - 6 * d)) * a + 3 * d) * a;\n    }return function (c, d, b, f) {\n      if (0 <= c && 1 >= c && 0 <= b && 1 >= b) {\n        var e = new Float32Array(11);if (c !== d || b !== f) for (var k = 0; 11 > k; ++k) {\n          e[k] = a(.1 * k, c, b);\n        }return function (k) {\n          if (c === d && b === f) return k;if (0 === k) return 0;if (1 === k) return 1;for (var h = 0, l = 1; 10 !== l && e[l] <= k; ++l) {\n            h += .1;\n          }--l;var l = h + (k - e[l]) / (e[l + 1] - e[l]) * .1,\n              n = 3 * (1 - 3 * b + 3 * c) * l * l + 2 * (3 * b - 6 * c) * l + 3 * c;if (.001 <= n) {\n            for (h = 0; 4 > h; ++h) {\n              n = 3 * (1 - 3 * b + 3 * c) * l * l + 2 * (3 * b - 6 * c) * l + 3 * c;if (0 === n) break;var m = a(l, c, b) - k,\n                  l = l - m / n;\n            }k = l;\n          } else if (0 === n) k = l;else {\n            var l = h,\n                h = h + .1,\n                g = 0;do {\n              m = l + (h - l) / 2, n = a(m, c, b) - k, 0 < n ? h = m : l = m;\n            } while (1e-7 < Math.abs(n) && 10 > ++g);k = m;\n          }return a(k, d, f);\n        };\n      }\n    };\n  }(),\n      Q = function () {\n    function a(a, b) {\n      return 0 === a || 1 === a ? a : -Math.pow(2, 10 * (a - 1)) * Math.sin(2 * (a - 1 - b / (2 * Math.PI) * Math.asin(1)) * Math.PI / b);\n    }var c = \"Quad Cubic Quart Quint Sine Expo Circ Back Elastic\".split(\" \"),\n        d = { In: [[.55, .085, .68, .53], [.55, .055, .675, .19], [.895, .03, .685, .22], [.755, .05, .855, .06], [.47, 0, .745, .715], [.95, .05, .795, .035], [.6, .04, .98, .335], [.6, -.28, .735, .045], a], Out: [[.25, .46, .45, .94], [.215, .61, .355, 1], [.165, .84, .44, 1], [.23, 1, .32, 1], [.39, .575, .565, 1], [.19, 1, .22, 1], [.075, .82, .165, 1], [.175, .885, .32, 1.275], function (b, c) {\n        return 1 - a(1 - b, c);\n      }], InOut: [[.455, .03, .515, .955], [.645, .045, .355, 1], [.77, 0, .175, 1], [.86, 0, .07, 1], [.445, .05, .55, .95], [1, 0, 0, 1], [.785, .135, .15, .86], [.68, -.55, .265, 1.55], function (b, c) {\n        return .5 > b ? a(2 * b, c) / 2 : 1 - a(-2 * b + 2, c) / 2;\n      }] },\n        b = { linear: A(.25, .25, .75, .75) },\n        f = {},\n        e;for (e in d) {\n      f.type = e, d[f.type].forEach(function (a) {\n        return function (d, f) {\n          b[\"ease\" + a.type + c[f]] = h.fnc(d) ? d : A.apply($jscomp$this, d);\n        };\n      }(f)), f = { type: f.type };\n    }return b;\n  }(),\n      ha = { css: function css(a, c, d) {\n      return a.style[c] = d;\n    }, attribute: function attribute(a, c, d) {\n      return a.setAttribute(c, d);\n    }, object: function object(a, c, d) {\n      return a[c] = d;\n    }, transform: function transform(a, c, d, b, f) {\n      b[f] || (b[f] = []);b[f].push(c + \"(\" + d + \")\");\n    } },\n      v = [],\n      B = 0,\n      ia = function () {\n    function a() {\n      B = requestAnimationFrame(c);\n    }function c(c) {\n      var b = v.length;if (b) {\n        for (var d = 0; d < b;) {\n          v[d] && v[d].tick(c), d++;\n        }a();\n      } else cancelAnimationFrame(B), B = 0;\n    }return a;\n  }();q.version = \"2.2.0\";q.speed = 1;q.running = v;q.remove = function (a) {\n    a = P(a);for (var c = v.length; c--;) {\n      for (var d = v[c], b = d.animations, f = b.length; f--;) {\n        u(a, b[f].animatable.target) && (b.splice(f, 1), b.length || d.pause());\n      }\n    }\n  };q.getValue = K;q.path = function (a, c) {\n    var d = h.str(a) ? e(a)[0] : a,\n        b = c || 100;return function (a) {\n      return { el: d, property: a, totalLength: N(d) * (b / 100) };\n    };\n  };q.setDashoffset = function (a) {\n    var c = N(a);a.setAttribute(\"stroke-dasharray\", c);return c;\n  };q.bezier = A;q.easings = Q;q.timeline = function (a) {\n    var c = q(a);c.pause();c.duration = 0;c.add = function (d) {\n      c.children.forEach(function (a) {\n        a.began = !0;a.completed = !0;\n      });m(d).forEach(function (b) {\n        var d = z(b, D(S, a || {}));d.targets = d.targets || a.targets;b = c.duration;var e = d.offset;d.autoplay = !1;d.direction = c.direction;d.offset = h.und(e) ? b : L(e, b);c.began = !0;c.completed = !0;c.seek(d.offset);d = q(d);d.began = !0;d.completed = !0;d.duration > b && (c.duration = d.duration);c.children.push(d);\n      });c.seek(0);c.reset();c.autoplay && c.restart();return c;\n    };return c;\n  };q.random = function (a, c) {\n    return Math.floor(Math.random() * (c - a + 1)) + a;\n  };return q;\n});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar g;\n\n// This works in non-strict mode\ng = function () {\n\treturn this;\n}();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBSUEsQ0FBSjs7QUFFQTtBQUNBQSxJQUFLLFlBQVc7QUFDZixRQUFPLElBQVA7QUFDQSxDQUZHLEVBQUo7O0FBSUEsSUFBSTtBQUNIO0FBQ0FBLEtBQUlBLEtBQUtDLFNBQVMsYUFBVCxHQUFMLElBQWtDLENBQUMsR0FBRUMsSUFBSCxFQUFTLE1BQVQsQ0FBdEM7QUFDQSxDQUhELENBR0UsT0FBTUMsQ0FBTixFQUFTO0FBQ1Y7QUFDQSxLQUFHLFFBQU9DLE1BQVAseUNBQU9BLE1BQVAsT0FBa0IsUUFBckIsRUFDQ0osSUFBSUksTUFBSjtBQUNEOztBQUVEO0FBQ0E7QUFDQTs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQk4sQ0FBakIiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcbn0gY2F0Y2goZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxuXHRcdGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(6);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// Prepare cssTransformation\nvar transform;\n\nvar options = {\"hmr\":true}\noptions.transform = transform\n// add the styles to the DOM\nvar update = __webpack_require__(8)(content, options);\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js!./main.css\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js!./main.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL21haW4uY3NzPzU4N2YiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tYWluLmNzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gUHJlcGFyZSBjc3NUcmFuc2Zvcm1hdGlvblxudmFyIHRyYW5zZm9ybTtcblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tYWluLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tYWluLmNzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvc3R5bGVzL21haW4uY3NzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(7)(undefined);\n// imports\n\n\n// module\nexports.push([module.i, \"body, html {\\r\\n  height: 100%;\\r\\n  background: -webkit-gradient(linear, left top, left bottom, from(rgba(255, 60, 101, .45)), to(rgba(255, 60, 101, .34)));\\r\\n  background: -webkit-linear-gradient(top, rgba(255, 60, 101, .45), rgba(255, 60, 101, .34));\\r\\n  background: linear-gradient(180deg, rgba(255, 60, 101, .45), rgba(255, 60, 101, .34));\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n.container{\\r\\n  height: 100%;\\r\\n  position: relative;\\r\\n  overflow: hidden;\\r\\n}\\r\\n\\r\\n.backcontent{\\r\\n  height: 100%\\r\\n}\\r\\n\\r\\n.saywords {\\r\\n  position: absolute;\\r\\n  top: 45%;\\r\\n  left: 50%;\\r\\n  color: #fff;\\r\\n  line-height: 1.5;\\r\\n  -webkit-transform: translate3d(-50%, -50%, 0);\\r\\n  transform: translate3d(-50%, -50%, 0);\\r\\n  font-weight: 400;\\r\\n  background: hsla(0, 0%, 100%, .3);\\r\\n  text-shadow: 1px 1px 10px rgba(0, 0, 0, .2);\\r\\n  width: 65%;\\r\\n  padding: .53333rem;\\r\\n  letter-spacing: .01333rem;\\r\\n  font-size: 18px;\\r\\n}\\r\\n\\r\\n.typed-cursor {\\r\\n  opacity: 1;\\r\\n  font-weight: 100;\\r\\n  -webkit-animation: blink 2s infinite;\\r\\n  -moz-animation: blink 2s infinite;\\r\\n  -ms-animation: blink 2s infinite;\\r\\n  -o-animation: blink 2s infinite;\\r\\n  animation: blink 2s infinite;\\r\\n}\\r\\n\\r\\n@keyframes blink {\\r\\n  0% {\\r\\n    opacity: 1;\\r\\n  }\\r\\n  50% {\\r\\n    opacity: 0;\\r\\n  }\\r\\n  100% {\\r\\n    opacity: 1;\\r\\n  }\\r\\n}\\r\\n\\r\\n@-webkit-keyframes blink {\\r\\n  0% {\\r\\n    opacity: 1;\\r\\n  }\\r\\n  50% {\\r\\n    opacity: 0;\\r\\n  }\\r\\n  100% {\\r\\n    opacity: 1;\\r\\n  }\\r\\n}\\r\\n\\r\\n@-moz-keyframes blink {\\r\\n  0% {\\r\\n    opacity: 1;\\r\\n  }\\r\\n  50% {\\r\\n    opacity: 0;\\r\\n  }\\r\\n  100% {\\r\\n    opacity: 1;\\r\\n  }\\r\\n}\\r\\n\\r\\n@-ms-keyframes blink {\\r\\n  0% {\\r\\n    opacity: 1;\\r\\n  }\\r\\n  50% {\\r\\n    opacity: 0;\\r\\n  }\\r\\n  100% {\\r\\n    opacity: 1;\\r\\n  }\\r\\n}\\r\\n\\r\\n@-o-keyframes blink {\\r\\n  0% {\\r\\n    opacity: 1;\\r\\n  }\\r\\n  50% {\\r\\n    opacity: 0;\\r\\n  }\\r\\n  100% {\\r\\n    opacity: 1;\\r\\n  }\\r\\n}\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL21haW4uY3NzP2UyYjgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7O0FBR0E7QUFDQSxxQ0FBc0MsbUJBQW1CLDhIQUE4SCxpR0FBaUcsNEZBQTRGLGdCQUFnQixpQkFBaUIsS0FBSyxtQkFBbUIsbUJBQW1CLHlCQUF5Qix1QkFBdUIsS0FBSyxxQkFBcUIsdUJBQXVCLG1CQUFtQix5QkFBeUIsZUFBZSxnQkFBZ0Isa0JBQWtCLHVCQUF1QixvREFBb0QsNENBQTRDLHVCQUF1Qix3Q0FBd0Msa0RBQWtELGlCQUFpQix5QkFBeUIsZ0NBQWdDLHNCQUFzQixLQUFLLHVCQUF1QixpQkFBaUIsdUJBQXVCLDJDQUEyQyx3Q0FBd0MsdUNBQXVDLHNDQUFzQyxtQ0FBbUMsS0FBSywwQkFBMEIsVUFBVSxtQkFBbUIsT0FBTyxXQUFXLG1CQUFtQixPQUFPLFlBQVksbUJBQW1CLE9BQU8sS0FBSyxrQ0FBa0MsVUFBVSxtQkFBbUIsT0FBTyxXQUFXLG1CQUFtQixPQUFPLFlBQVksbUJBQW1CLE9BQU8sS0FBSywrQkFBK0IsVUFBVSxtQkFBbUIsT0FBTyxXQUFXLG1CQUFtQixPQUFPLFlBQVksbUJBQW1CLE9BQU8sS0FBSyw4QkFBOEIsVUFBVSxtQkFBbUIsT0FBTyxXQUFXLG1CQUFtQixPQUFPLFlBQVksbUJBQW1CLE9BQU8sS0FBSyw2QkFBNkIsVUFBVSxtQkFBbUIsT0FBTyxXQUFXLG1CQUFtQixPQUFPLFlBQVksbUJBQW1CLE9BQU8sS0FBSzs7QUFFNTZEIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHVuZGVmaW5lZCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJib2R5LCBodG1sIHtcXHJcXG4gIGhlaWdodDogMTAwJTtcXHJcXG4gIGJhY2tncm91bmQ6IC13ZWJraXQtZ3JhZGllbnQobGluZWFyLCBsZWZ0IHRvcCwgbGVmdCBib3R0b20sIGZyb20ocmdiYSgyNTUsIDYwLCAxMDEsIC40NSkpLCB0byhyZ2JhKDI1NSwgNjAsIDEwMSwgLjM0KSkpO1xcclxcbiAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG9wLCByZ2JhKDI1NSwgNjAsIDEwMSwgLjQ1KSwgcmdiYSgyNTUsIDYwLCAxMDEsIC4zNCkpO1xcclxcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgyNTUsIDYwLCAxMDEsIC40NSksIHJnYmEoMjU1LCA2MCwgMTAxLCAuMzQpKTtcXHJcXG4gIG1hcmdpbjogMDtcXHJcXG4gIHBhZGRpbmc6IDA7XFxyXFxufVxcclxcblxcclxcbi5jb250YWluZXJ7XFxyXFxuICBoZWlnaHQ6IDEwMCU7XFxyXFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbn1cXHJcXG5cXHJcXG4uYmFja2NvbnRlbnR7XFxyXFxuICBoZWlnaHQ6IDEwMCVcXHJcXG59XFxyXFxuXFxyXFxuLnNheXdvcmRzIHtcXHJcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gIHRvcDogNDUlO1xcclxcbiAgbGVmdDogNTAlO1xcclxcbiAgY29sb3I6ICNmZmY7XFxyXFxuICBsaW5lLWhlaWdodDogMS41O1xcclxcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKC01MCUsIC01MCUsIDApO1xcclxcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgtNTAlLCAtNTAlLCAwKTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxyXFxuICBiYWNrZ3JvdW5kOiBoc2xhKDAsIDAlLCAxMDAlLCAuMyk7XFxyXFxuICB0ZXh0LXNoYWRvdzogMXB4IDFweCAxMHB4IHJnYmEoMCwgMCwgMCwgLjIpO1xcclxcbiAgd2lkdGg6IDY1JTtcXHJcXG4gIHBhZGRpbmc6IC41MzMzM3JlbTtcXHJcXG4gIGxldHRlci1zcGFjaW5nOiAuMDEzMzNyZW07XFxyXFxuICBmb250LXNpemU6IDE4cHg7XFxyXFxufVxcclxcblxcclxcbi50eXBlZC1jdXJzb3Ige1xcclxcbiAgb3BhY2l0eTogMTtcXHJcXG4gIGZvbnQtd2VpZ2h0OiAxMDA7XFxyXFxuICAtd2Via2l0LWFuaW1hdGlvbjogYmxpbmsgMnMgaW5maW5pdGU7XFxyXFxuICAtbW96LWFuaW1hdGlvbjogYmxpbmsgMnMgaW5maW5pdGU7XFxyXFxuICAtbXMtYW5pbWF0aW9uOiBibGluayAycyBpbmZpbml0ZTtcXHJcXG4gIC1vLWFuaW1hdGlvbjogYmxpbmsgMnMgaW5maW5pdGU7XFxyXFxuICBhbmltYXRpb246IGJsaW5rIDJzIGluZmluaXRlO1xcclxcbn1cXHJcXG5cXHJcXG5Aa2V5ZnJhbWVzIGJsaW5rIHtcXHJcXG4gIDAlIHtcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG4gIH1cXHJcXG4gIDUwJSB7XFxyXFxuICAgIG9wYWNpdHk6IDA7XFxyXFxuICB9XFxyXFxuICAxMDAlIHtcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuQC13ZWJraXQta2V5ZnJhbWVzIGJsaW5rIHtcXHJcXG4gIDAlIHtcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG4gIH1cXHJcXG4gIDUwJSB7XFxyXFxuICAgIG9wYWNpdHk6IDA7XFxyXFxuICB9XFxyXFxuICAxMDAlIHtcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuQC1tb3ota2V5ZnJhbWVzIGJsaW5rIHtcXHJcXG4gIDAlIHtcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG4gIH1cXHJcXG4gIDUwJSB7XFxyXFxuICAgIG9wYWNpdHk6IDA7XFxyXFxuICB9XFxyXFxuICAxMDAlIHtcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuQC1tcy1rZXlmcmFtZXMgYmxpbmsge1xcclxcbiAgMCUge1xcclxcbiAgICBvcGFjaXR5OiAxO1xcclxcbiAgfVxcclxcbiAgNTAlIHtcXHJcXG4gICAgb3BhY2l0eTogMDtcXHJcXG4gIH1cXHJcXG4gIDEwMCUge1xcclxcbiAgICBvcGFjaXR5OiAxO1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG5ALW8ta2V5ZnJhbWVzIGJsaW5rIHtcXHJcXG4gIDAlIHtcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG4gIH1cXHJcXG4gIDUwJSB7XFxyXFxuICAgIG9wYWNpdHk6IDA7XFxyXFxuICB9XFxyXFxuICAxMDAlIHtcXHJcXG4gICAgb3BhY2l0eTogMTtcXHJcXG4gIH1cXHJcXG59XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL3NyYy9zdHlsZXMvbWFpbi5jc3Ncbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function (useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif (item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function (modules, mediaQuery) {\n\t\tif (typeof modules === \"string\") modules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor (var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif (typeof id === \"number\") alreadyImportedModules[id] = true;\n\t\t}\n\t\tfor (i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif (typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif (mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if (mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanM/MTU5ZiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidXNlU291cmNlTWFwIiwibGlzdCIsInRvU3RyaW5nIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJpZCIsInB1c2giLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJ0b0NvbW1lbnQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjb25jYXQiLCJzb3VyY2VNYXAiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBSUE7QUFDQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFTQyxZQUFULEVBQXVCO0FBQ3ZDLEtBQUlDLE9BQU8sRUFBWDs7QUFFQTtBQUNBQSxNQUFLQyxRQUFMLEdBQWdCLFNBQVNBLFFBQVQsR0FBb0I7QUFDbkMsU0FBTyxLQUFLQyxHQUFMLENBQVMsVUFBVUMsSUFBVixFQUFnQjtBQUMvQixPQUFJQyxVQUFVQyx1QkFBdUJGLElBQXZCLEVBQTZCSixZQUE3QixDQUFkO0FBQ0EsT0FBR0ksS0FBSyxDQUFMLENBQUgsRUFBWTtBQUNYLFdBQU8sWUFBWUEsS0FBSyxDQUFMLENBQVosR0FBc0IsR0FBdEIsR0FBNEJDLE9BQTVCLEdBQXNDLEdBQTdDO0FBQ0EsSUFGRCxNQUVPO0FBQ04sV0FBT0EsT0FBUDtBQUNBO0FBQ0QsR0FQTSxFQU9KRSxJQVBJLENBT0MsRUFQRCxDQUFQO0FBUUEsRUFURDs7QUFXQTtBQUNBTixNQUFLTyxDQUFMLEdBQVMsVUFBU0MsT0FBVCxFQUFrQkMsVUFBbEIsRUFBOEI7QUFDdEMsTUFBRyxPQUFPRCxPQUFQLEtBQW1CLFFBQXRCLEVBQ0NBLFVBQVUsQ0FBQyxDQUFDLElBQUQsRUFBT0EsT0FBUCxFQUFnQixFQUFoQixDQUFELENBQVY7QUFDRCxNQUFJRSx5QkFBeUIsRUFBN0I7QUFDQSxPQUFJLElBQUlILElBQUksQ0FBWixFQUFlQSxJQUFJLEtBQUtJLE1BQXhCLEVBQWdDSixHQUFoQyxFQUFxQztBQUNwQyxPQUFJSyxLQUFLLEtBQUtMLENBQUwsRUFBUSxDQUFSLENBQVQ7QUFDQSxPQUFHLE9BQU9LLEVBQVAsS0FBYyxRQUFqQixFQUNDRix1QkFBdUJFLEVBQXZCLElBQTZCLElBQTdCO0FBQ0Q7QUFDRCxPQUFJTCxJQUFJLENBQVIsRUFBV0EsSUFBSUMsUUFBUUcsTUFBdkIsRUFBK0JKLEdBQS9CLEVBQW9DO0FBQ25DLE9BQUlKLE9BQU9LLFFBQVFELENBQVIsQ0FBWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBRyxPQUFPSixLQUFLLENBQUwsQ0FBUCxLQUFtQixRQUFuQixJQUErQixDQUFDTyx1QkFBdUJQLEtBQUssQ0FBTCxDQUF2QixDQUFuQyxFQUFvRTtBQUNuRSxRQUFHTSxjQUFjLENBQUNOLEtBQUssQ0FBTCxDQUFsQixFQUEyQjtBQUMxQkEsVUFBSyxDQUFMLElBQVVNLFVBQVY7QUFDQSxLQUZELE1BRU8sSUFBR0EsVUFBSCxFQUFlO0FBQ3JCTixVQUFLLENBQUwsSUFBVSxNQUFNQSxLQUFLLENBQUwsQ0FBTixHQUFnQixTQUFoQixHQUE0Qk0sVUFBNUIsR0FBeUMsR0FBbkQ7QUFDQTtBQUNEVCxTQUFLYSxJQUFMLENBQVVWLElBQVY7QUFDQTtBQUNEO0FBQ0QsRUF4QkQ7QUF5QkEsUUFBT0gsSUFBUDtBQUNBLENBMUNEOztBQTRDQSxTQUFTSyxzQkFBVCxDQUFnQ0YsSUFBaEMsRUFBc0NKLFlBQXRDLEVBQW9EO0FBQ25ELEtBQUlLLFVBQVVELEtBQUssQ0FBTCxLQUFXLEVBQXpCO0FBQ0EsS0FBSVcsYUFBYVgsS0FBSyxDQUFMLENBQWpCO0FBQ0EsS0FBSSxDQUFDVyxVQUFMLEVBQWlCO0FBQ2hCLFNBQU9WLE9BQVA7QUFDQTs7QUFFRCxLQUFJTCxnQkFBZ0IsT0FBT2dCLElBQVAsS0FBZ0IsVUFBcEMsRUFBZ0Q7QUFDL0MsTUFBSUMsZ0JBQWdCQyxVQUFVSCxVQUFWLENBQXBCO0FBQ0EsTUFBSUksYUFBYUosV0FBV0ssT0FBWCxDQUFtQmpCLEdBQW5CLENBQXVCLFVBQVVrQixNQUFWLEVBQWtCO0FBQ3pELFVBQU8sbUJBQW1CTixXQUFXTyxVQUE5QixHQUEyQ0QsTUFBM0MsR0FBb0QsS0FBM0Q7QUFDQSxHQUZnQixDQUFqQjs7QUFJQSxTQUFPLENBQUNoQixPQUFELEVBQVVrQixNQUFWLENBQWlCSixVQUFqQixFQUE2QkksTUFBN0IsQ0FBb0MsQ0FBQ04sYUFBRCxDQUFwQyxFQUFxRFYsSUFBckQsQ0FBMEQsSUFBMUQsQ0FBUDtBQUNBOztBQUVELFFBQU8sQ0FBQ0YsT0FBRCxFQUFVRSxJQUFWLENBQWUsSUFBZixDQUFQO0FBQ0E7O0FBRUQ7QUFDQSxTQUFTVyxTQUFULENBQW1CTSxTQUFuQixFQUE4QjtBQUM3QjtBQUNBLEtBQUlDLFNBQVNULEtBQUtVLFNBQVNDLG1CQUFtQkMsS0FBS0MsU0FBTCxDQUFlTCxTQUFmLENBQW5CLENBQVQsQ0FBTCxDQUFiO0FBQ0EsS0FBSU0sT0FBTyxpRUFBaUVMLE1BQTVFOztBQUVBLFFBQU8sU0FBU0ssSUFBVCxHQUFnQixLQUF2QjtBQUNBIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(selector) {\n\t\tif (typeof memo[selector] === \"undefined\") {\n\t\t\tvar styleTarget = fn.call(this, selector);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[selector] = styleTarget;\n\t\t}\n\t\treturn memo[selector]\n\t};\n})(function (target) {\n\treturn document.querySelector(target)\n});\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(9);\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton) options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n\tif (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\toptions.attrs.type = \"text/css\";\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\toptions.attrs.type = \"text/css\";\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n\t// get current location\n\tvar location = typeof window !== \"undefined\" && window.location;\n\n\tif (!location) {\n\t\tthrow new Error(\"fixUrls requires window.location\");\n\t}\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t\treturn css;\n\t}\n\n\tvar baseUrl = location.protocol + \"//\" + location.host;\n\tvar currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n This regular expression is just a way to recursively match brackets within\n a string.\n \t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n    (  = Start a capturing group\n      (?:  = Start a non-capturing group\n          [^)(]  = Match anything that isn't a parentheses\n          |  = OR\n          \\(  = Match a start parentheses\n              (?:  = Start another non-capturing groups\n                  [^)(]+  = Match anything that isn't a parentheses\n                  |  = OR\n                  \\(  = Match a start parentheses\n                      [^)(]*  = Match anything that isn't a parentheses\n                  \\)  = Match a end parentheses\n              )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n  \\)  = Match a close parens\n \t /gi  = Get all matches, not the first.  Be case insensitive.\n  */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function (fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl.trim().replace(/^\"(.*)\"$/, function (o, $1) {\n\t\t\treturn $1;\n\t\t}).replace(/^'(.*)'$/, function (o, $1) {\n\t\t\treturn $1;\n\t\t});\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) {\n\t\t\treturn fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t\t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzPzk4OTMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNzcyIsImxvY2F0aW9uIiwid2luZG93IiwiRXJyb3IiLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsInBhdGhuYW1lIiwicmVwbGFjZSIsImZpeGVkQ3NzIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsInVucXVvdGVkT3JpZ1VybCIsInRyaW0iLCJvIiwiJDEiLCJ0ZXN0IiwibmV3VXJsIiwiaW5kZXhPZiIsIkpTT04iLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiI7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUFhQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWU7QUFDOUI7QUFDQSxLQUFJQyxXQUFXLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNBLE9BQU9ELFFBQXZEOztBQUVBLEtBQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQ2IsUUFBTSxJQUFJRSxLQUFKLENBQVUsa0NBQVYsQ0FBTjtBQUNEOztBQUVGO0FBQ0EsS0FBSSxDQUFDSCxHQUFELElBQVEsT0FBT0EsR0FBUCxLQUFlLFFBQTNCLEVBQXFDO0FBQ25DLFNBQU9BLEdBQVA7QUFDQTs7QUFFRCxLQUFJSSxVQUFVSCxTQUFTSSxRQUFULEdBQW9CLElBQXBCLEdBQTJCSixTQUFTSyxJQUFsRDtBQUNBLEtBQUlDLGFBQWFILFVBQVVILFNBQVNPLFFBQVQsQ0FBa0JDLE9BQWxCLENBQTBCLFdBQTFCLEVBQXVDLEdBQXZDLENBQTNCOztBQUVEO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJBLEtBQUlDLFdBQVdWLElBQUlTLE9BQUosQ0FBWSxxREFBWixFQUFtRSxVQUFTRSxTQUFULEVBQW9CQyxPQUFwQixFQUE2QjtBQUM5RztBQUNBLE1BQUlDLGtCQUFrQkQsUUFDcEJFLElBRG9CLEdBRXBCTCxPQUZvQixDQUVaLFVBRlksRUFFQSxVQUFTTSxDQUFULEVBQVlDLEVBQVosRUFBZTtBQUFFLFVBQU9BLEVBQVA7QUFBWSxHQUY3QixFQUdwQlAsT0FIb0IsQ0FHWixVQUhZLEVBR0EsVUFBU00sQ0FBVCxFQUFZQyxFQUFaLEVBQWU7QUFBRSxVQUFPQSxFQUFQO0FBQVksR0FIN0IsQ0FBdEI7O0FBS0E7QUFDQSxNQUFJLCtDQUErQ0MsSUFBL0MsQ0FBb0RKLGVBQXBELENBQUosRUFBMEU7QUFDeEUsVUFBT0YsU0FBUDtBQUNEOztBQUVEO0FBQ0EsTUFBSU8sTUFBSjs7QUFFQSxNQUFJTCxnQkFBZ0JNLE9BQWhCLENBQXdCLElBQXhCLE1BQWtDLENBQXRDLEVBQXlDO0FBQ3RDO0FBQ0ZELFlBQVNMLGVBQVQ7QUFDQSxHQUhELE1BR08sSUFBSUEsZ0JBQWdCTSxPQUFoQixDQUF3QixHQUF4QixNQUFpQyxDQUFyQyxFQUF3QztBQUM5QztBQUNBRCxZQUFTZCxVQUFVUyxlQUFuQixDQUY4QyxDQUVWO0FBQ3BDLEdBSE0sTUFHQTtBQUNOO0FBQ0FLLFlBQVNYLGFBQWFNLGdCQUFnQkosT0FBaEIsQ0FBd0IsT0FBeEIsRUFBaUMsRUFBakMsQ0FBdEIsQ0FGTSxDQUVzRDtBQUM1RDs7QUFFRDtBQUNBLFNBQU8sU0FBU1csS0FBS0MsU0FBTCxDQUFlSCxNQUFmLENBQVQsR0FBa0MsR0FBekM7QUFDQSxFQTVCYyxDQUFmOztBQThCQTtBQUNBLFFBQU9SLFFBQVA7QUFDQSxDQTFFRCIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC8pL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ })
/******/ ]);